  # Ce type "User" représente un utilisateur de notre application.
  type User {
    id: ID!
    email: String!
    password: String!
    name: String!
  }

  # On ajoute un type AuhtPayload qui représente le retour de la mutation "login".
  # Ce type permet de transmettre un token et un utilisateur en même temps.
  type AuthPayload {
    token: String
    user: User
  }
  # Les types "Query" et "Mutation" sont des types spéciaux qui définissent les requêtes et mutations que l'on peut faire sur notre API.
  # On peut les imaginer comme des "endpoints" de notre API.

  # Quelques queries pour récupérer des données.
  type Query {
    # On veut pouvoir récupérer tous les utilisateurs de notre application
    allUsers: [User]
    # On veut pouvoir récupérer un utilisateur en particulier grâce à son ID.
    oneUser(id: ID!): User

  }

  # Mutation pour créer un utilisateur et se connecter.
  type Mutation {
    # On veut pouvoir se connecter. ET on veut pouvoir récupérer un token.
    login(email: String!, password: String!): AuthPayload
    # On veut pouvoir créer un utilisateur.
    signup(email: String!, password: String!, name: String!): AuthPayload
  }